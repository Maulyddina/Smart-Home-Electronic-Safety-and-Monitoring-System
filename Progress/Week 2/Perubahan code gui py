import customtkinter as ctk
import tkinter as tk
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import matplotlib.dates as mdates
import datetime
import serial
import threading
import time
import random

# Setup CustomTkinter appearance
ctk.set_appearance_mode("light")
ctk.set_default_color_theme("blue")

# --- Inisialisasi koneksi serial ---
try:
    ser = serial.serial_for_url('rfc2217://localhost:4000', baudrate=115200, timeout=1)
    serial_status = "✅ Serial connected!"
except Exception as e:
    serial_status = f"❌ Gagal terhubung serial: {e}"
    ser = None

# --- Global Variables ---
time_data = []
voltage_data = []
load_on = False
power_accumulated_kwh = 0.0
last_update_time = time.time()

# --- Root Window ---
root = ctk.CTk()
root.title("Smart Voltage Monitor")
root.geometry("1350x800")
root.configure(fg_color="#f3f4f6")  # Background soft grey

# --- Header ---
header = ctk.CTkFrame(root, corner_radius=10, fg_color="#cbd5e1")
header.pack(fill="x", padx=20, pady=(20, 10))

ctk.CTkLabel(header, text="⚡ Lurcotte", font=("Segoe UI", 24, "bold"), text_color="#334155").pack(pady=10)
ctk.CTkLabel(header, text=serial_status, font=("Segoe UI", 12), text_color="#1e293b").pack(pady=2)

# --- Main Frame ---
main_frame = ctk.CTkFrame(root, fg_color="#f3f4f6")
main_frame.pack(fill="both", expand=True, padx=20, pady=10)
main_frame.grid_columnconfigure((0, 1, 2), weight=1)
main_frame.grid_rowconfigure(0, weight=1)

# --- Grafik ---
graph_card = ctk.CTkFrame(main_frame, corner_radius=20, fg_color="white")
graph_card.grid(row=0, column=0, columnspan=2, sticky="nsew", padx=10, pady=10)

fig, ax = plt.subplots(figsize=(9, 3.5))
fig.patch.set_facecolor('#ffffff')
ax.set_facecolor('#ffffff')
ax.tick_params(colors='#1e293b')
for spine in ax.spines.values():
    spine.set_color('#94a3b8')
ax.xaxis.set_major_formatter(mdates.DateFormatter('%H:%M:%S'))
line, = ax.plot([], [], color='#0284c7', linewidth=2, marker='o', label='Voltage PLN')
ax.legend(loc='upper left')

canvas = FigureCanvasTkAgg(fig, master=graph_card)
canvas.get_tk_widget().pack(fill='both', expand=True, padx=10, pady=10)

# --- Panel Kontrol dan Info ---
control_card = ctk.CTkFrame(main_frame, corner_radius=20, fg_color="#e0f2fe")
control_card.grid(row=0, column=2, sticky="nsew", padx=10, pady=10)

# --- Kontrol Beban ---
ctk.CTkLabel(control_card, text="💡 Kontrol Beban", font=("Segoe UI", 18, "bold"), text_color="#0f172a").pack(anchor="w", padx=20, pady=(15, 5))
control_inner = ctk.CTkFrame(control_card, corner_radius=15, fg_color="#ffffff")
control_inner.pack(fill="x", padx=20, pady=5)

emoji_label = ctk.CTkLabel(control_inner, text="🔌", font=("Segoe UI", 42))
emoji_label.grid(row=0, column=0, rowspan=2, padx=(15, 10), pady=10)

load_status_label = ctk.CTkLabel(control_inner, text="Lampu: 💡 OFF", font=("Segoe UI", 14))
load_status_label.grid(row=0, column=1, sticky="w", padx=5, pady=(15, 5))

btn_load_toggle = ctk.CTkButton(control_inner, text="Nyalakan", command=lambda: toggle_load(), width=120)
btn_load_toggle.grid(row=1, column=1, sticky="w", padx=5, pady=(0, 15))

# --- Info Energi ---
ctk.CTkLabel(control_card, text="🔋 Informasi Daya", font=("Segoe UI", 18, "bold"), text_color="#0f172a").pack(anchor="w", padx=20, pady=(20, 5))
info_inner = ctk.CTkFrame(control_card, corner_radius=15, fg_color="#fef9c3")
info_inner.pack(fill="x", padx=20, pady=5)

emoji_energy = ctk.CTkLabel(info_inner, text="⚡", font=("Segoe UI", 42))
emoji_energy.grid(row=0, column=0, rowspan=2, padx=(15, 10), pady=10)

power_label = ctk.CTkLabel(info_inner, text="Daya (kWh): 0.000", font=("Segoe UI", 14))
power_label.grid(row=0, column=1, sticky="w", padx=5, pady=(15, 5))

cost_label = ctk.CTkLabel(info_inner, text="Biaya (Rp): 0", font=("Segoe UI", 14))
cost_label.grid(row=1, column=1, sticky="w", padx=5, pady=(0, 15))

# --- Footer / Placeholder / Quotes ---
footer_card = ctk.CTkFrame(root, corner_radius=10, fg_color="#cbd5e1")
footer_card.pack(fill="x", padx=20, pady=(0, 10))

quote = "\u2728 Selalu pantau dan kendalikan penggunaan daya listrikmu untuk masa depan yang lebih hemat dan ramah lingkungan."
ctk.CTkLabel(footer_card, text=quote, font=("Segoe UI", 12, "italic"), text_color="#334155").pack(pady=8)

# --- Function: Toggle Load ---
def toggle_load():
    global load_on
    load_on = not load_on
    load_status_label.configure(text="Lampu: 🔆 ON" if load_on else "Lampu: 💡 OFF")
    btn_load_toggle.configure(text="Matikan" if load_on else "Nyalakan")

# --- Function: Update Graph ---
def update_graph():
    ax.clear()
    ax.set_facecolor('#ffffff')
    ax.tick_params(colors='#1e293b')
    for spine in ax.spines.values():
        spine.set_color('#94a3b8')
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%H:%M:%S'))
    ax.plot(time_data, voltage_data, color='#0284c7', linewidth=2, marker='o', label='Voltage PLN')
    ax.set_title("Tegangan PLN Terhadap Waktu", color='#0f172a')
    ax.set_xlabel("Waktu", color='#0f172a')
    ax.set_ylabel("Tegangan (V)", color='#0f172a')
    ax.legend(loc='upper left')
    canvas.draw()

# --- Function: Serial Thread ---
def read_serial():
    global power_accumulated_kwh, last_update_time
    while True:
        try:
            if ser and ser.in_waiting:
                line = ser.readline().decode('utf-8').strip()
                if line.startswith("V:"):
                    voltage = float(line[2:].strip())
                else:
                    continue
            else:
                voltage = random.uniform(210.0, 230.0)

            now = datetime.datetime.now()
            time_data.append(now)
            voltage_data.append(voltage)
            if len(time_data) > 60:
                time_data.pop(0)
                voltage_data.pop(0)

            update_graph()

            current_time = time.time()
            elapsed = current_time - last_update_time
            last_update_time = current_time

            if load_on:
                current_power = voltage * 0.2
                energy = current_power * (elapsed / 3600.0)
                power_accumulated_kwh += energy
                biaya = power_accumulated_kwh * 1500

                power_label.configure(text=f"Daya (kWh): {power_accumulated_kwh:.3f}")
                cost_label.configure(text=f"Biaya (Rp): {int(biaya):,}".replace(',', '.'))

            time.sleep(1)

        except Exception as e:
            print("Error membaca data serial:", e)
            time.sleep(2)

# --- Start Serial Thread ---
threading.Thread(target=read_serial, daemon=True).start()

# --- Run App ---
root.mainloop()

